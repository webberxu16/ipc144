
    IPC144B - Test #2                           Name
    Intro to Programming Using C                    -----------------------

    1. Determine the exact output of the following program, showing your
       rough work:

        #include <stdio.h>

        int foo(char c, char s[])
        {
            int i, n = 0;

            for (i = 0; s[i] != '\0'; i++)
                if (c == s[i])
                    n = 1;
            return n;
        }

        int bar(char str[])
        {
            int i, t = 0;
            char one[]   = "aeilnorstu",
                 two[]   = "dg",
                 three[] = "bcmp",
                 four[]  = "fhvwy",
                 five[]  = "k",
                 eight[] = "jx",
                 ten[]   = "qz";

            for (i = 0; str[i] != '\0'; i++) {
                if (foo(str[i], one) == 1)
                    t += 1;
                else if (foo(str[i], two) == 1)
                    t += 2;
                else if (foo(str[i], three) == 1)
                    t += 3;
                else if (foo(str[i], four) == 1)
                    t += 4;
                else if (foo(str[i], five) == 1)
                    t += 5;
                else if (foo(str[i], eight) == 1)
                    t += 8;
                else if (foo(str[i], ten) == 1)
                    t += 10;
                printf("%c-%d\n", str[i], t);
            }
            return t;
        }

        main()
        {
            int n;

            n = bar("jewel");
            printf("What's the score? %d!\n", n);
        }




    IPC144B - Test #2                           Name
    Intro to Programming Using C                    -----------------------

    1. Determine the exact output of the following program, showing your
       rough work:

        #include <stdio.h>

        int foo(char c, char s[])
        {
            int i, n = 0;

            for (i = 0; s[i] != '\0'; i++)
                if (c == s[i])
                    n = 1;
            return n;
        }

        int bar(char str[])
        {
            int i, t = 0;
            char one[]   = "aeilnorstu",
                 two[]   = "dg",
                 three[] = "bcmp",
                 four[]  = "fhvwy",
                 five[]  = "k",
                 eight[] = "jx",
                 ten[]   = "qz";

            for (i = 0; str[i] != '\0'; i++) {
                if (foo(str[i], one) == 1)
                    t += 1;
                else if (foo(str[i], two) == 1)
                    t += 2;
                else if (foo(str[i], three) == 1)
                    t += 3;
                else if (foo(str[i], four) == 1)
                    t += 4;
                else if (foo(str[i], five) == 1)
                    t += 5;
                else if (foo(str[i], eight) == 1)
                    t += 8;
                else if (foo(str[i], ten) == 1)
                    t += 10;
                printf("%c:%d\n", str[i], t);
            }
            return t;
        }

        main()
        {
            int n;

            n = bar("quick");
            printf("What's the score? %d!\n", n);
        }




    2. Since the 407 is such a cash cow, the TTC wants to play around
       with the idea of paying a different amount depending on how far
       you go on a bus. To help them with a computer simulation they
       are working on, write a function:

           double cost(int nstops, double costs[], int start, int end)

       which returns the cost of a trip under the proposed new system,
       where:

           nstops  - is the number of stops on the bus' route.

           costs   - is an array of costs to go from one stop to the
                     next, where element 0 has the cost to go from
                     the first stop to the second stop, element 1 has
                     the cost to go from the second stop to the third,
                     and so on. This array will therefore have 
                     (nstops-1) elements.

           start   - is the number of the stop where the person got
                     on the bus, where 1 indicates the first stop,
                     2 indicates the second, and so on.

           end     - is the number of the stop where the person got
                     off the bus.

       You may assume that start is at least 1, start is less than 
       end, and end is no bigger than nstops. (In other words, you 
       may assume that start and end are valid).

       For example, the code

            double costs[] = {0.20, 0.10, 0.15, 0.05, 0.10};
            printf("$%.2lf\n", cost(6, costs, 2, 4));

       displays

            $0.25

       which is 0.10 (cost to go from 2 to 3) plus 0.15 (cost to go
       from 3 to 4).

       BONUS! you will get a paltry bonus mark if your function also
       allows start to be bigger than end to simulate riding on a
       "return" trip. In this case, end would be at least 1, start
       would be bigger than end, and start would be no bigger than
       nstops.













    2. Since the 407 is such a cash cow, the TTC wants to play around
       with the idea of paying a different amount depending on how far
       you go on a bus. To help them with a computer simulation they
       are working on, write a function:

           double trip(int start, int end, int nstops, double costs[])

       which returns the cost of a trip under the proposed new system,
       where:

           start   - is the number of the stop where the person got
                     on the bus, where 1 indicates the first stop,
                     2 indicates the second, and so on.

           end     - is the number of the stop where the person got
                     off the bus.

           nstops  - is the number of stops on the bus' route.

           costs   - is an array of costs to go from one stop to the
                     next, where element 0 has the cost to go from
                     the first stop to the second stop, element 1 has
                     the cost to go from the second stop to the third,
                     and so on. This array will therefore have 
                     (nstops-1) elements.

       You may assume that start is at least 1, start is less than 
       end, and end is no bigger than nstops. (In other words, you 
       may assume that start and end are valid).

       For example, the code

            double costs[] = {0.20, 0.10, 0.15, 0.05, 0.10};
            printf("$%.2lf\n", trip(2, 4, 6, costs));

       displays

            $0.25

       which is 0.10 (cost to go from 2 to 3) plus 0.15 (cost to go
       from 3 to 4).

       BONUS! you will get a paltry bonus mark if your function also
       allows start to be bigger than end to simulate riding on a
       "return" trip. In this case, end would be at least 1, start
       would be bigger than end, and start would be no bigger than
       nstops.












