
    Intro to Programming Using C                Name
    IPC144C - Test 2                                 --------------------


    1. Determine the exact output of the following program, showing
       your rough work.

        #include <stdio.h>
        #include <string.h>

        void foo(char s[], int n1, int n2, int n3);
    
        main()
        {
            char ss[2][31];
            int n[] = {1, 3, 4, 0, 2, 3};
            int i;
            strcpy(ss[0], "droeust");
            strcpy(ss[1], "rwoqrek");
            for (i = 0; i < 2; i++) {
                foo(ss[i], n[3 * i], n[(3 * i) + 1], n[(3 * i) + 2]);
                printf("%s ", ss[i]);
            }
            putchar('\n');
        }

        void foo(char s[], int n1, int n2, int n3)
        {
            int i = 0;

            while (s[i] != '\0') {

                if (i >= n3)
                    s[i] = s[i + 3];
                else if (i >= n2)
                    s[i] = s[i + 2];
                else if (i >= n1)
                    s[i] = s[i + 1];

                if (s[i] != '\0')
                    i++;
            }
        }

















    2. Write a function

    int find(int num, char desc[], int nums[], char descs[][41], int size)

       which looks up a part number and retrieves the description for 
       that part. The parameters are:

       num   - the part number for which to search.
       desc  - a char array into which the description is to
               be copied, if the part is found.
       nums  - an array of all available part numbers.
       descs - an array of part descriptions, stored as strings. 
               descs[0] is the description for the part with 
               part number nums[0], descs[1] is the description 
               for nums[1] and so on.
       size  - the number of elements of nums (and therefore also
               the number of strings in descs).

       The function returns the index, in nums, of the part number, or -1 
       if the part number couldn't be found. 

       If the part number isn't found, then the desc array is not touched.

       For example, 

         int pn[] = { 123, 523, 121, 654, 786, 34, 56 };
         char pd[][41] = { "5:16 gear", "3 in. spring", "1mm spacer",
              "2mm spacer", "main bracket", "frame rail", "5 ft tube"};
         char found[41];

         printf("%d:", find(654, found, pn, pd, 7));
         printf("%s\n", found);
         printf("%d:", find(655, found, pn, pd, 7));
         printf("%s\n", found);

       displays

         3:2mm spacer
         -1:2mm spacer     (since 655 isn't found, "found" doesn't change)





















    Intro to Programming Using C                Name
    IPC144C - Test 2                                 --------------------


    1. Determine the exact output of the following program, showing
       your rough work.

        #include <stdio.h>
        #include <string.h>

        void foo(char s[], int n1, int n2, int n3);
    

        main()
        {
            char ss[2][31];
            int n[] = {1, 2, 4, 0, 1, 4};
            int i;
            strcpy(ss[0], "chocolo");
            strcpy(ss[1], "isotufif");
            for (i = 0; i < 2; i++) {
                foo(ss[i], n[3 * i], n[(3 * i) + 1], n[(3 * i) + 2]);
                printf("%s ", ss[i]);
            }
            putchar('\n');
        }

        void foo(char s[], int n1, int n2, int n3)
        {
            int i = 0;

            while (s[i] != '\0') {

                if (i >= n3)
                    s[i] = s[i + 3];
                else if (i >= n2)
                    s[i] = s[i + 2];
                else if (i >= n1)
                    s[i] = s[i + 1];

                if (s[i] != '\0')
                    i++;
            }
        }
















    2. Write a function

    int locate(int num, char name[], int nums[], char names[][41], int size)

       which looks up a client number and retrieves the name for that
       client. The parameters are:

       num   - the client number for which to search.
       name  - a char array into which the name is to be copied, if 
               the client number is found.
       nums  - an array of all available client numbers.
       names - an array of client names, stored as strings. 
               names[0] is the name for the client with client 
               number nums[0], names[1] is the name for nums[1], 
               and so on.
       size  - the number of elements of nums (and therefore also
               the number of strings in names).

       The function returns the index, in nums, of the client number, or 
       -1 if the client number couldn't be found. 

       If the client number isn't found, then the name array is not 
       touched.

       For example, 

         int cno[] = { 123, 523, 121, 654, 786, 34, 56 };
         char cnam[][41] = { "Joe Blow", "Joe Black", "Joe Cocker",
              "Joe DiMaggio", "Joan Baez", "Joan Rivers", "Joan Blown"};
         char found[41];

         printf("%d:", locate(654, found, cno, cnam, 7));
         printf("%s\n", found);
         printf("%d:", locate(655, found, cno, cnam, 7));
         printf("%s\n", found);

       displays

         3:Joe DiMaggio
         -1:Joe DiMaggio     (since 655 isn't found, "found" doesn't change)



















